Une vulnérabilité CSRF (pour Cross-Site Request Forgery, en français : falsification de requête inter-site) est 
une faille qui permet à un attaquant d’abuser à la fois d’un utilisateur, d’un navigateur web et d’un serveur. 
Le principe est assez simple. L’objectif de l’attaque est de forcer un utilisateur authentifié sur un site ou 
une application web à exécuter des actions spécifiques à son insu.

Pour ce faire, il s’agit de corrompre la relation entre un navigateur web et un serveur, conçue en théorie, pour 
empêcher différents sites et applications web d’interférer les uns avec les autres. Lors d’une attaque réussie, 
une faille CSRF peut permettre à un attaquant de forcer le changement d’un mot de passe et/ou autres informations 
personnelles et ainsi récupérer des données sensibles si la victime est un utilisateur avec des droits standards. 
Si la victime détient un compte administrateur, une attaque CSRF peut compromettre l’ensemble de l’application web.

De manière générale, lorsqu’une fonctionnalité est vulnérable aux attaques CSRF, les attaquants cherchent à 
pousser les utilisateurs à charger une page malveillante.

Cette page contenant du code malveillant enverra des requêtes via le navigateur d’un utilisateur comme s’il 
s’agissait d’une action légitime de ce dernier, ce qui permet à l’attaquant de réaliser des actions telles que la 
modification du mot de passe et/ou d’autres informations personnelles ou le changement des configurations et des 
paramètres personnels de l’utilisateur sur la plateforme vulnérable.

L’impact d’une attaque CSRF réussie peut donc être assez sévère. Les attaquants s’appuient souvent sur des 
techniques d’ingénierie sociale (via du phishing généralement avec l’envoi d’un lien par email par exemple dont 
l’objectif est de rediriger un utilisateur vers un site malveillant) pour en augmenter les chances de succès.

Enfin, une dernière précision : les attaques CSRF visent généralement les demandes de modification (mot de passe 
et autres) et non le vol de données, car les attaquants n’ont aucun moyen de voir la réponse à la demande falsifiée.

See: https://www.vaadata.com/blog/fr/attaques-csrf-principes-impacts-exploitations-bonnes-pratiques-securite/
See: howto-0065-csrf-vulnerability.txt

>@
>@#########################################################################################################################
>@#                                                                                                                       #
>@# [ CSRF vulnerability | Cross-Site Request Forgery ]                                                                   #
>@#                                                                                                                       #
>@# Une vulnérabilité CSRF (pour Cross-Site Request Forgery, en français : falsification de requête inter-site) est       #
>@# une faille qui permet à un attaquant d’abuser à la fois d’un utilisateur, d’un navigateur web et d’un serveur.        #
>@# Le principe est assez simple. L’objectif de l’attaque est de forcer un utilisateur authentifié sur un site ou         #
>@# une application web à exécuter des actions spécifiques à son insu.                                                    #
>@#                                                                                                                       #
>@# Pour ce faire, il s’agit de corrompre la relation entre un navigateur web et un serveur, conçue en théorie, pour      #
>@# empêcher différents sites et applications web d’interférer les uns avec les autres. Lors d’une attaque réussie,       #
>@# une faille CSRF peut permettre à un attaquant de forcer le changement d’un mot de passe et/ou autres informations     #
>@# personnelles et ainsi récupérer des données sensibles si la victime est un utilisateur avec des droits standards.     #
>@# Si la victime détient un compte administrateur, une attaque CSRF peut compromettre l’ensemble de l’application web.   #
>@#                                                                                                                       #
>@# De manière générale, lorsqu’une fonctionnalité est vulnérable aux attaques CSRF, les attaquants cherchent à           #
>@# pousser les utilisateurs à charger une page malveillante.                                                             #
>@#                                                                                                                       #
>@# Cette page contenant du code malveillant enverra des requêtes via le navigateur d’un utilisateur comme s’il           #
>@# s’agissait d’une action légitime de ce dernier, ce qui permet à l’attaquant de réaliser des actions telles que la     #
>@# modification du mot de passe et/ou d’autres informations personnelles ou le changement des configurations et des      #
>@# paramètres personnels de l’utilisateur sur la plateforme vulnérable.                                                  #
>@#                                                                                                                       #
>@# L’impact d’une attaque CSRF réussie peut donc être assez sévère. Les attaquants s’appuient souvent sur des            #
>@# techniques d’ingénierie sociale (via du phishing généralement avec l’envoi d’un lien par email par exemple dont       #
>@# l’objectif est de rediriger un utilisateur vers un site malveillant) pour en augmenter les chances de succès.         #
>@#                                                                                                                       #
>@# Enfin, une dernière précision : les attaques CSRF visent généralement les demandes de modification (mot de passe      #
>@# et autres) et non le vol de données, car les attaquants n’ont aucun moyen de voir la réponse à la demande falsifiée.  #
>@#                                                                                                                       #
>@# Voir: https://www.vaadata.com/blog/fr/attaques-csrf-principes-impacts-exploitations-bonnes-pratiques-securite/        #
>@# Voir: howto-0065-csrf-vulnerability.txt                                                                               #
>@# Voir: howto-0100-prevention-web-vulnerability.txt                                                                     #
>@#                                                                                                                       #
>@#########################################################################################################################
>@
