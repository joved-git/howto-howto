Transmission Control Protocol (literally, “transmission control protocol”), abbreviated TCP, is a transport protocol   
reliable, in connected mode, documented in IETF RFC 92932.                                                                      
                                                                                                                                     
In the Internet model, also called the TCP/IP model, TCP is located above IP. In the OSI model, it corresponds to the layer      
transport, intermediate of the network layer and the session layer. Applications transmit data streams over a        
network connection. TCP divides the byte stream into segments whose size depends on the MTU of the underlying network (link layer       
data).

TCP was developed in 1973 and then adopted for Arpanet in 1983, replacing NCP (RFC 8013).

*TCP works in connected mode.

*TCP helps control data flow and congestion.

* TCP helps ensure data flows correctly across the network (correctly, quickly, error-free, lossless of packages).

* TCP establishes a connection using the 3-way handshake process.

* Example of data exchange and management of Seq and Ack:

           SYN ->                 (Seq A,           Ack /)                         SYN ->                 (Seq 0,           Ack 0)
           <- SYN-ACK             (Seq B,           Ack A+1)                       <- SYN-ACK             (Seq 0,           Ack 1)
           ACK ->                 (Seq A'=A+1,      Ack B+1)                       ACK ->                 (Seq 1,           Ack 1)
           Data (len 400) ->      (Seq A',          Ack B+1)                       Data (len 400) ->      (Seq 1 ,          Ack 1)
           <- ACK (len 500)       (Seq B'=B+1,      Ack A'+400)                    <- ACK (len 500)       (Seq 1,           Ack 401)
           ACK ->                 (Seq A''=A'+400 , Ack B'+500)                    ACK ->                 (Seq 401 ,        Ack 501)
   

                         ________________________________________________________________________________________________________
                        |                                                   |                                                    |
 Layer 4 / Transport    |                     Source Port                   |                 Destination port                   |
                        |                      16  bits                     |                      16 bits                       |
                        |___________________________________________________|____________________________________________________|
                        |                                                                                                        |
                        |                                            Sequence number                                             |
                        |                                                32 bits                                                 |
                        |________________________________________________________________________________________________________|
                        |                                                                                                        |
                        |                                          Acknowledgment number                                         |
                        |                                                32 bits                                                 |
                        |________________________________________________________________________________________________________|
                        |        |          |   |   |   |   |   |   |   |   |                                                    |   
                        |  Data  | Reserved | NS|CWR|ECE|URG|ACK|PSH|SYN|FIN|                    Windows size                    |
                        | Offset |  3 bits  | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |                      16 bits                       |
                        | 4 bits |          |   |   |   |   |   |   |   |   |                                                    |
                        |________|__________|___|___|___|___|___|___|___|___|____________________________________________________|
                        |                                                   |                                                    |
                        |                      Checksum                     |                URG pointer (if URG)                |
                        |                      16  bits                     |                      16 bits                       |
                        |___________________________________________________|____________________________________________________|
                        |                                                                                                        |
                        |                                                Options                                                 |
                        |                                                32 bits                                                 |
                        |________________________________________________________________________________________________________|
                        |                                                                                                        |
                        |                                                  Data                                                  |
                        |                                                [ ... ]                                                 |
                        |________________________________________________________________________________________________________|
                        

With:

   Source port: the port in the Source server             |   Destination port: the port in the Destination server
   Sequence number: the number of the sequence            |   Acknowledgment number: the number of acknowledgment
   Data offset: size of the header with options           |   Reserved: reserver field
                                                          | 
   Flags                                                  |   Flags
     NS (Nonce):                                          |     CWR (Congestion Window Rediced):
     ECE (ECN-Echo):                                      |     URG (Urent): for urgent data
     ACK: This is a ACK                                   |     PSH (Push): used to send data without delay
     RST (Reset): there was a disconnection               |     SYN: this is a SYN
     FIN: this is the end of the connection               |
                                                          |
   Windows size: size of the data TCP window (in bytes)   |   Checksum: control hecksum
                 before acknowledgment (auto calc)        |   URG pointer: pointer to urgent datas (if URG = 1)
   Options: options                                       |   Data: raw data

>@
>@##########################################################################################################################################
>@#                                                                                                                                        # 
>@# [ TCP protocol ]                                                                                                                       #
>@#                                                                                                                                        #
>@# Transmission Control Protocol (literally, “transmission control protocol”), abbreviated TCP, is a reliable transport protocol, in      #
>@# connected mode, documented in IETF RFC 92932.                                                                                          #
>@#                                                                                                                                        #
>@# In the Internet model, also called the TCP/IP model, TCP is located above IP. In the OSI model, it corresponds to the layer transport, #
>@# intermediate of the network layer and the session layer. Applications transmit data streams over a network connection. TCP divides     # 
>@# the byte stream into segments whose size depends on the MTU of the underlying network (link layer data).                               #
>@#                                                                                                                                        #
>@# TCP was developed in 1973 and then adopted for Arpanet in 1983, replacing NCP (RFC 8013).                                              #
>@#                                                                                                                                        #
>@# See: howto-0057-tcp-three-way-handshake.txt                                                                                            #
>@# See: howto-0058-tcp-three-way-handshake-fr.txt                                                                                         #
>@# See: howto-0160-tcp-protocol.txt                                                                                                       #
>@#                                                                                                                                        #
>@#----------------------------------------------------------------------------------------------------------------------------------------# 
>@
>@*TCP works in connected mode.
>@
>@*TCP helps control data flow and congestion.
>@
>@* TCP helps ensure data flows correctly across the network (correctly, quickly, error-free, lossless of packages).
>@
>@* TCP establishes a connection using the 3-way handshake process.
>@
>@* Example of data exchange and management of Seq and Ack:
>@
>@           SYN ->                 (Seq A,           Ack /)                         SYN ->                 (Seq 0,           Ack 0)
>@           <- SYN-ACK             (Seq B,           Ack A+1)                       <- SYN-ACK             (Seq 0,           Ack 1)
>@           ACK ->                 (Seq A'=A+1,      Ack B+1)                       ACK ->                 (Seq 1,           Ack 1)
>@           Data (len 400) ->      (Seq A',          Ack B+1)                       Data (len 400) ->      (Seq 1 ,          Ack 1)
>@           <- ACK (len 500)       (Seq B'=B+1,      Ack A'+400)                    <- ACK (len 500)       (Seq 1,           Ack 401)
>@           ACK ->                 (Seq A''=A'+400 , Ack B'+500)                    ACK ->                 (Seq 401 ,        Ack 501)
>@   
>@
>@                         ________________________________________________________________________________________________________
>@                        |                                                   |                                                    |
>@ Layer 4 / Transport    |                     Source Port                   |                 Destination port                   |
>@                        |                      16  bits                     |                      16 bits                       |
>@                        |___________________________________________________|____________________________________________________|
>@                        |                                                                                                        |
>@                        |                                            Sequence number                                             |
>@                        |                                                32 bits                                                 |
>@                        |________________________________________________________________________________________________________|
>@                        |                                                                                                        |
>@                        |                                          Acknowledgment number                                         |
>@                        |                                                32 bits                                                 |
>@                        |________________________________________________________________________________________________________|
>@                        |        |          |   |   |   |   |   |   |   |   |                                                    |   
>@                        |  Data  | Reserved | NS|CWR|ECE|URG|ACK|PSH|SYN|FIN|                    Windows size                    |
>@                        | Offset |  3 bits  | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |                      16 bits                       |
>@                        | 4 bits |          |   |   |   |   |   |   |   |   |                                                    |
>@                        |________|__________|___|___|___|___|___|___|___|___|____________________________________________________|
>@                        |                                                   |                                                    |
>@                        |                      Checksum                     |                URG pointer (if URG)                |
>@                        |                      16  bits                     |                      16 bits                       |
>@                        |___________________________________________________|____________________________________________________|
>@                        |                                                                                                        |
>@                        |                                                Options                                                 |
>@                        |                                                32 bits                                                 |
>@                        |________________________________________________________________________________________________________|
>@                        |                                                                                                        |
>@                        |                                                  Data                                                  |
>@                        |                                                [ ... ]                                                 |
>@                        |________________________________________________________________________________________________________|
>@                        
>@
>@With:
>@
>@   Source port: the port in the Source server             |   Destination port: the port in the Destination server
>@   Sequence number: the number of the sequence            |   Acknowledgment number: the number of acknowledgment
>@   Data offset: size of the header with options           |   Reserved: reserved field
>@                                                          | 
>@   Flags                                                  |   Flags
>@     NS (Nonce):                                          |     CWR (Congestion Window Rediced):
>@     ECE (ECN-Echo):                                      |     URG (Urent): for urgent data
>@     ACK: This is a ACK                                   |     PSH (Push): used to send data without delay
>@     RST (Reset): there was a disconnection               |     SYN: this is a SYN
>@     FIN: this is the end of the connection               |
>@                                                          |
>@   Windows size: size of the data TCP window (in bytes)   |   Checksum: control hecksum
>@                 before acknowledgment (auto calc)        |   URG pointer: pointer to urgent datas (if URG = 1)
>@  Options: options                                        |   Data: raw data
>@
>@##########################################################################################################################################
>@
