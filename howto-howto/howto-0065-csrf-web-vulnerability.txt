A CSRF vulnerability (for Cross-Site Request Forgery, in French: falsification de requête inter-site) is a flaw that 
allows an attacker to abuse a user, a web browser and a server at the same time . The principle is quite simple. The 
objective of the attack is to force an authenticated user on a site or web application to perform specific actions 
without their knowledge.

This is done by corrupting the relationship between a web browser and a server, designed in theory, to prevent 
different sites and web applications from interfering with each other. During a successful attack, a CSRF flaw can 
allow an attacker to force the change of a password and/or other personal information and thus recover sensitive 
data if the victim is a user with standard rights. If the victim has an administrator account, a CSRF attack can 
compromise the entire web application.

Generally speaking, when a feature is vulnerable to CSRF attacks, attackers seek to trick users into loading a 
malicious page.

This page containing malicious code will send requests through a user's browser as if it were a legitimate user 
action, allowing the attacker to perform actions such as changing the password. password and/or other personal 
information or changing the user's personal configurations and settings on the vulnerable platform.

The impact of a successful CSRF attack can therefore be quite severe. Attackers often rely on social engineering 
techniques (via phishing generally by sending a link by email for example whose objective is to redirect a user to a 
malicious site) to increase the chances of success.

Finally, one last clarification: CSRF attacks generally target modification requests (password and others) and not 
data theft, because the attackers have no way of seeing the response to the falsified request.

See: https://www.vaadata.com/blog/fr/attaques-csrf-principes-impacts-exploitations-bonnes-pratiques-securite/        
See: howto-0065-csrf-vulnerability.txt                                                                                

-> Prevention

  -Use PHP session to be sure this is the good user that launches script and avoid bad links.

>@
>@#######################################################################################################################
>@#                                                                                                                     #
>@# [ CSRF vulnerability | Cross-Site Request Forgery ]                                                                 #
>@#                                                                                                                     #
>@# A CSRF vulnerability (for Cross-Site Request Forgery, in French: falsification de requête inter-site) is a flaw     #
>@# that allows an attacker to abuse a user, a web browser and a server at the same time . The principle is quite       #
>@# simple.  The objective of the attack is to force an authenticated user on a site or web application to perform      #
>@# specific actions without their knowledge.                                                                           #
>@#                                                                                                                     #
>@# This is done by corrupting the relationship between a web browser and a server, designed in theory, to prevent      #
>@# different sites and web applications from interfering with each other. During a successful attack, a CSRF flaw can  #
>@# allow an attacker to force the change of a password and/or other personal information and thus recover sensitive    #
>@# data if the victim is a user with standard rights. If the victim has an administrator account, a CSRF attack can    #
>@# compromise the entire web application.                                                                              #
>@#                                                                                                                     #
>@# Generally speaking, when a feature is vulnerable to CSRF attacks, attackers seek to trick users into loading a      #
>@# malicious page.                                                                                                     #
>@#                                                                                                                     #
>@# This page containing malicious code will send requests through a user's browser as if it were a legitimate user     #
>@# action, allowing the attacker to perform actions such as changing the password. password and/or other personal      #
>@# information or changing the user's personal configurations and settings on the vulnerable platform.                 #
>@#                                                                                                                     #
>@# The impact of a successful CSRF attack can therefore be quite severe. Attackers often rely on social engineering    #
>@# techniques (via phishing generally by sending a link by email for example whose objective is to redirect a user to  #
>@# a malicious site) to increase the chances of success.                                                               #
>@#                                                                                                                     #
>@# Finally, one last clarification: CSRF attacks generally target modification requests (password and others) and not  #
>@# data theft, because the attackers have no way of seeing the response to the falsified request.                      #
>@#                                                                                                                     #
>@# See: https://www.vaadata.com/blog/fr/attaques-csrf-principes-impacts-exploitations-bonnes-pratiques-securite/       #
>@# See: howto-0066-csrf-vulnerability-fr.txt                                                                           #
>@# See: howto-0100-prevention-web-vulnerability.txt                                                                    #
>@#                                                                                                                     #
>@#---------------------------------------------------------------------------------------------------------------------#
>@
>@-> Prevention
>@
>@  -Use PHP session to be sure this is the good user that launches script and avoid bad links.
>@
